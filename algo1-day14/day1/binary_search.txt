Approach 1: Binary Search

Intuition

Binary search is a textbook algorithm based on the idea to compare the target value to the middle element of the array.

If the target value is equal to the middle element - we're done.

If the target value is smaller - continue to search on the left.

If the target value is larger - continue to search on the right.


Algorithm

- Initialise left and right pointers : left = 0, right = n - 1.

- While left <= right :

    - Compare middle element of the array nums[pivot] to the target value target.

        - If the middle element is the target target = nums[pivot] : return pivot.

        - If the target is not yet found :

            1. If target < nums[pivot], continue the search on the left right = pivot - 1.

            2. Else continue the search on the right left = pivot + 1.


Code : -

class Solution {
    public int search(int[] nums, int target) {
        int foundAt = -1;
        int left = 0;
        int right = nums.length - 1;
        while(left<=right){
            int mid = (left+right)/2;
            if(target>nums[mid]){
                left = mid +1;
            }else if(target<nums[mid]){
                right = mid - 1;
            }else{
                foundAt = mid;
                break;
            }
        }
        return foundAt;
    }

    public static void main(String[] args){
        Scanner scn = new Scanner(System.in);
        int nums = scn.nextInt();
        int[] arr = new int[nums];
        for(int i =0;i<nums;i++){
            arr[i] = scn.nextInt();
        }

        search(nums,target);
    }
}