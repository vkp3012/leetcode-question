Given an integer array nums, move all 0's to the end of it while maintaining the relative order of the non-zero elements.

Note that you must do this in-place without making a copy of the array.

 

Example 1:

Input: nums = [0,1,0,3,12]
Output: [1,3,12,0,0]
Example 2:

Input: nums = [0]
Output: [0]
 

Constraints:

1 <= nums.length <= 104
-231 <= nums[i] <= 231 - 1

Solution
This question comes under a broad category of "Array Transformation". T
his category is the meat of tech interviews. Mostly because arrays are such a simple and easy to use data structure. 
Traversal or representation doesn't require any boilerplate code and most of your code will look like the Pseudocode itself.

The 2 requirements of the question are:

    1. Move all the 0's to the end of array.

    2. All the non-zero elements must retain their original order.

It's good to realize here that both the requirements are mutually exclusive, i.e., 
you can solve the individual sub-problems and then combine them for the final solution.

code : -

class Solution {
    public void moveZeroes(int[] nums) {
        
        int n = nums.length;
        int j = -1;
        int i = 0;
        
        while(i < n){
            if(nums[i] == 0 && j == -1){
                j = i;
            }else if(nums[i] != 0 && j != -1){
                nums[j] = nums[i];
                nums[i] = 0;
                j++;
            }
            i++;
        }
    }
}